// Prisma schema for baby dress e-commerce website
// Models: User, Category, Product, Cart, CartItem, Order, OrderItem

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  name      String
  role      String   @default("user") // user or admin
  orders    Order[]
  cart      Cart?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String?
  imageUrl    String?
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Product {
  id             Int         @id @default(autoincrement())
  name           String
  description    String
  price          Float
  salePrice      Float?
  imageUrl       String
  images         String?     // Additional images as JSON array
  category       Category    @relation(fields: [categoryId], references: [id])
  categoryId     Int
  size           String?     // Size options as JSON array
  color          String?     // Color options as JSON array
  stock          Int         @default(0)
  featured       Boolean     @default(false)
  cartItems      CartItem[]
  orderItems     OrderItem[]
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
}

model Cart {
  id        Int        @id @default(autoincrement())
  user      User       @relation(fields: [userId], references: [id])
  userId    Int        @unique
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id        Int      @id @default(autoincrement())
  cart      Cart     @relation(fields: [cartId], references: [id])
  cartId    Int
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
  quantity  Int      @default(1)
  size      String?
  color     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id            Int         @id @default(autoincrement())
  user          User        @relation(fields: [userId], references: [id])
  userId        Int
  items         OrderItem[]
  total         Float
  status        String      @default("pending") // pending, processing, shipped, delivered, canceled
  shippingName  String
  shippingEmail String
  shippingPhone String
  shippingAddress String
  shippingCity  String
  shippingState String
  shippingZip   String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   Int
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
  quantity  Int
  price     Float
  size      String?
  color     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
